"""
Agent d'analyse d'offres d'emploi
Extrait, analyse et g√©n√®re les th√®mes des offres
"""

import os
import sys
from pathlib import Path
from typing import List, Dict
import PyPDF2
import io
import aiofiles

# Import corrig√©
sys.path.insert(0, str(Path(__file__).parent.parent))
from utils.openrouter_client import OpenRouterClient

class OfferAnalyzer:
    """Agent pour analyser les offres d'emploi"""

    def __init__(self):
        self.openrouter = OpenRouterClient()
        self.analysis_prompt = """
Analyse cette offre d'emploi en fran√ßais et g√©n√®re un rapport structur√© en markdown.

Tu dois couvrir EXACTEMENT ces 8 points:

## 1. Exigences Obligatoires
Les crit√®res non n√©gociables (dipl√¥mes, ann√©es d'exp√©rience, certifications, etc.)
Liste d√©taill√©e avecÈáèÂåñations si pr√©sentes.

## 2. Qualifications Souhaitables
Les comp√©tences et exp√©riences qui constituent un atout majeur
√ÄHighlighter les avantages concurrentiels.

## 3. Responsabilit√©s et T√¢ches Principales
Les activit√©s concr√®tes et les missions quotidiennes du poste
Organisation en bullet points avec verbes d'action.

## 4. D√©fis et Objectifs Strat√©giques Implicites
Les probl√®mes que le candidat devra r√©soudre et les buts de l'entreprise
Analyse de la value proposition du poste.

## 5. Intitul√© de Poste Exact
Le titre exact tel qu'il appara√Æt dans l'offre.

## 6. Comp√©tences Techniques (Hard Skills)
Liste des comp√©tences techniques requises
Organisation par cat√©gorie si possible.

## 7. Comp√©tences Comportementales (Soft Skills)
Comp√©tences humaines et comportementales attendues
Avec contexte d'usage.

## 8. Valeurs et Culture d'Entreprise
Les valeurs et la culture d'entreprise d√©ductibles de l'offre
Impact sur le profil recherch√©.

Conclus ton analyse par un r√©sum√© executive de 3-4 lignes.
"""

    async def extract_pdf_content(self, pdf_path: Path) -> str:
        """
        Extrait le contenu textuel d'un PDF

        Args:
            pdf_path: Chemin vers le fichier PDF

        Returns:
            Contenu textuel du PDF
        """
        print(f"  üìÑ Extraction du PDF: {pdf_path}")

        try:
            content = ""
            with open(pdf_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                for page_num, page in enumerate(pdf_reader.pages):
                    text = page.extract_text()
                    content += f"\n--- Page {page_num + 1} ---\n{text}\n"

            return content.strip()

        except Exception as e:
            raise Exception(f"Erreur extraction PDF {pdf_path}: {str(e)}")

    async def analyze_offer(self, offer_name: str, offer_path: str, output_dir: Path) -> Dict[str, str]:
        """
        Analyse compl√®te d'une offre

        Args:
            offer_name: Nom de l'offre
            offer_path: Chemin vers l'offre (PDF)
            output_dir: Dossier de sortie pour l'analyse

        Returns:
            Dictionnaire avec analyse et th√®mes
        """
        print(f"\nüîç Analyse de l'offre: {offer_name}")

        # 1. Extraction du PDF
        pdf_path = Path(offer_path)
        if not pdf_path.exists():
            raise Exception(f"Fichier non trouv√©: {pdf_path}")

        pdf_content = await self.extract_pdf_content(pdf_path)

        # 2. Analyse avec IA
        print("  ü§ñ Analyse par IA...")
        analysis = await self.openrouter.analyze_offer(pdf_content, self.analysis_prompt)

        # 3. Extraction des th√®mes
        print("  üéØ Extraction des th√®mes...")
        themes_list = await self.openrouter.generate_themes(analysis)

        # 4. Sauvegarde de l'analyse
        output_file = output_dir / f"{offer_name}.md"
        async with aiofiles.open(output_file, 'w', encoding='utf-8') as f:
            await f.write(analysis)

        print(f"  üíæ Analyse sauvegard√©e: {output_file}")
        print(f"  üìä {len(themes_list)} th√®me(s) extrait(s)")

        return {
            'analysis': analysis,
            'themes': themes_list,
            'output_file': str(output_file)
        }

    async def batch_analyze(self, offers: Dict[str, tuple], output_dir: Path) -> Dict[str, Dict]:
        """
        Analyse plusieurs offres en lot

        Args:
            offers: Dictionnaire {nom: (path, bool)}
            output_dir: Dossier de sortie

        Returns:
            R√©sultats d'analyse par offre
        """
        results = {}

        for offer_name, (offer_path, is_processed) in offers.items():
            if is_processed:
                continue

            try:
                result = await self.analyze_offer(offer_name, offer_path, output_dir)
                results[offer_name] = result
                print(f"‚úÖ Analyse termin√©e: {offer_name}")

            except Exception as e:
                print(f"‚ùå Erreur analyse {offer_name}: {str(e)}")
                results[offer_name] = {'error': str(e)}

        return results
