{
  "env": {
    "ANTHROPIC_BASE_URL": "https://api.minimax.io/anthropic",
    "ANTHROPIC_AUTH_TOKEN": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJHcm91cE5hbWUiOiJMb3VpcyB0ZXBlIiwiVXNlck5hbWUiOiJMb3VpcyB0ZXBlIiwiQWNjb3VudCI6IiIsIlN1YmplY3RJRCI6IjE5ODIzNDAxNjkyNTE5NTUxMjkiLCJQaG9uZSI6IiIsIkdyb3VwSUQiOiIxOTgyMzQwMTY5MjQ3NzU2NzI5IiwiUGFnZU5hbWUiOiIiLCJNYWlsIjoidGVwZWxvdWlzQGdtYWlsLmNvbSIsIkNyZWF0ZVRpbWUiOiIyMDI1LTEwLTI2IDE2OjE3OjUyIiwiVG9rZW5UeXBlIjoxLCJpc3MiOiJtaW5pbWF4In0.qcQ46xv483mhbiAr7UUke_jF-Ed03GpT5Co6tkTPKpOD1xQizryiGbW22LJurSGuZqEIGD_GYuWSf2iuxJ0_UJtjKn04a04nYDkNxZRcwPuMGKmkTnsIaXvhyy0KBzKARNSfqytjuYVgzKOBvuU-MP4deTNfoT0h_-qtA3pazZ1VILDEOoRYL4ZNP-Ao8kj3RrD1a7_-x8Xkwk3e8sFoOFE01ceDudQTib6kEo0J7VQm64v7yxnmRlGIgNKeGhcYk7larWg5KqEwbVI_47_Orxs7x5rcVHBsvdFAF3o1-EJsuUQ-vdP5_-FeP-SrgQGv_YLNnfV1UqqDjRs2s3Ra4Q",
    "API_TIMEOUT_MS": "3000000",
    "CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC": "1",
    "ANTHROPIC_MODEL": "MiniMax-M2",
    "ANTHROPIC_SMALL_FAST_MODEL": "MiniMax-M2"
  },
  "permissions": {
    "allow": [
      "Bash(cat:*)",
      "Bash(curl:*)",
      "Bash(npm run dev:*)",
      "Bash(node /tmp/test-categories-api.js:*)",
      "Bash(npx tsc --noEmit src/components/catalog/category/CategorySelector.tsx)",
      "mcp__chrome-devtools__new_page",
      "mcp__chrome-devtools__take_screenshot",
      "mcp__chrome-devtools__take_snapshot",
      "mcp__chrome-devtools__list_console_messages",
      "mcp__chrome-devtools__list_network_requests",
      "mcp__chrome-devtools__evaluate_script",
      "mcp__chrome-devtools__navigate_page",
      "mcp__chrome-devtools__click",
      "mcp__chrome-devtools__fill",
      "mcp__chrome-devtools__close_page",
      "Read(//tmp/**)",
      "Bash(find /Users/tepe/Documents/Code/Project/WEB_APP/src/app/(auth)/login -type f)",
      "Bash(npm run build)",
      "Bash(npx tsc --noEmit middleware.ts)",
      "Bash(npm run lint)",
      "Bash(node -c /Users/tepe/Documents/Code/Project/WEB_APP/middleware.ts)",
      "Bash(npx tsc --noEmit --skipLibCheck)",
      "Bash(pkill -f \"next dev\")",
      "Bash(npm run seed)",
      "Bash(tee /tmp/seed-output.log)",
      "Bash(npm test -- tests/unit/lib/scrape/search.test.ts)",
      "Bash(npx tsc --noEmit src/components/catalog/SearchPageClient.tsx)",
      "Bash(npm run lint -- src/components/catalog/SearchPageClient.tsx)",
      "Bash(lsof -ti:3000)",
      "Bash(kill -9 22010 22352)",
      "mcp__chrome-devtools__list_pages",
      "Bash(npx tsc --noEmit)",
      "Bash(xargs kill -9)",
      "Bash(npx tsc --noEmit --skipLibCheck src/components/catalog/SearchPageClient.tsx)",
      "Bash(kill -9 32673 37681)",
      "Bash(npm test -- PriceRangeSlider-fix.test.tsx --no-coverage)",
      "Bash(timeout 30 npm run dev)",
      "Bash(for i in {1..5})",
      "Bash(do curl -s http://localhost:3000/buy)",
      "Bash(echo \"Iteration $i: OK\")",
      "Bash(done)",
      "Bash(npm test -- tests/unit/components/PriceRangeSlider-fix.test.tsx --no-coverage)",
      "Bash(pip install -r requirements.txt)",
      "Bash(if [ -z \"$OPENROUTER_API_KEY\" ])",
      "Bash(then echo \"⚠️ OPENROUTER_API_KEY n''est pas définie\")",
      "Bash(else echo \"✅ OPENROUTER_API_KEY est définie\")",
      "Bash(fi)",
      "Bash(chmod +x run_pipeline.sh)",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from agents.offer_analyzer import OfferAnalyzer; print(''✅ Imports OK'')\")",
      "Bash(python -c \"import json; data = json.load(open(''offres/offres.json'')); print(f''✅ {len(data)} offres à traiter'')\")",
      "Bash(python -c \"import PyPDF2; print(''PyPDF2 version:'', PyPDF2.__version__)\")",
      "Bash(python -m pip install --force-reinstall PyPDF2)",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from agents.offer_analyzer import OfferAnalyzer; print(''Imports OK - Agents fonctionnels'')\")",
      "Bash(python -m pip install -r requirements.txt --force-reinstall)",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from agents.offer_analyzer import OfferAnalyzer; print(''✅ Test 1: Import OfferAnalyzer - OK'')\")",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from agents.cv_generator import CVGenerator; print(''✅ Test 2: Import CVGenerator - OK'')\")",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from agents.letter_generator import LetterGenerator; print(''✅ Test 3: Import LetterGenerator - OK'')\")",
      "Bash(python -c \"import json; data = json.load(open(''offres/offres.json'')); print(f''✅ Test 4: {len(data)} offres prêtes à traiter'')\")",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from agents.offer_analyzer import OfferAnalyzer; print(''Import OfferAnalyzer OK'')\")",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from agents.cv_generator import CVGenerator; print(''Import CVGenerator OK'')\")",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from agents.letter_generator import LetterGenerator; print(''Import LetterGenerator OK'')\")",
      "Bash(python src/main.py)",
      "Bash(set -a)",
      "Bash(source .env)",
      "Bash(set +a)",
      "Bash(python -c \"import sys; print(sys.version)\")",
      "Bash(docker ps -a --format \"table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}\")",
      "Bash(docker run -d --name reactive-resume-app --network container:reactive-resume-minio -p 3100:3100 amrithpillai/reactive-resume:latest)",
      "Bash(lsof -i :3100)",
      "Bash(netstat -tlnp)",
      "Bash(ss -tlnp)",
      "Bash(python -c \"import dotenv; print(''python-dotenv installé'')\")",
      "Bash(pip install pydantic-settings)",
      "Bash(python -c \"import pydantic_settings; print(''✅ pydantic_settings importé avec succès'')\")",
      "Bash(pip install 'pydantic-settings==2.11.0' --force-reinstall)",
      "Bash(python -c \"import pydantic_settings; print(''✅ pydantic_settings importé avec succès, version:'', pydantic_settings.__version__)\")",
      "Bash(where python)",
      "Bash(py --list)",
      "Bash(py -3.12 src/main.py)",
      "Bash(py -3.12 -c \"from src.config.settings import Settings; print(''Model config:'', getattr(Settings, ''model_config'', ''Non défini''))\")",
      "Bash(py -3.12 -c \"from pydantic_settings import SettingsConfigDict; print(''✅ SettingsConfigDict:'', SettingsConfigDict); config = SettingsConfigDict(extra=''ignore''); print(''✅ Config:'', config)\")",
      "Bash(py -3.12 -c \"from pydantic_settings import SettingsConfigDict; print(''OK:'', SettingsConfigDict); config = SettingsConfigDict(extra=''ignore''); print(''Config:'', config)\")",
      "Bash(export CASE_SENSITIVE=false)",
      "Bash(export EXTRA_IGNORE=true)",
      "Bash(python -c \"from src.config.settings import settings; print(f''OPENROUTER_API_KEY: {\"\"définie\"\" if settings.openrouter_api_key else \"\"NON DÉFINIE\"\"}''); print(f''Reactive Resume URL: {settings.reactive_resume_url}''); print(f''Modèle: {settings.openrouter_model}'')\")",
      "Bash(pip install python-dotenv aiofiles pydantic-settings pydantic)",
      "Bash(python -c \"import pydantic; print(f''Pydantic version: {pydantic.__version__}''); from pydantic.v1 import BaseSettings; print(''Pydantic v1 disponible'')\")",
      "Bash(python -c \"import sys; sys.path.insert(0, ''src''); from config.settings import settings; print(f''OPENROUTER_API_KEY: {\"\"définie\"\" if settings.openrouter_api_key else \"\"NON DÉFINIE\"\"}''); print(f''Reactive Resume URL: {settings.reactive_resume_url}''); print(f''Modèle: {settings.openrouter_model}'')\")",
      "Bash(pip install 'python-dotenv>=0.19.0' --force-reinstall)",
      "Bash(python -c \"from dotenv import dotenv_values; print(''dotenv import OK'')\")",
      "Bash(python -c \"import python_dotenv; print(f''python-dotenv location: {python_dotenv.__file__}'')\")",
      "Bash(python -m pip list)",
      "Bash(pip uninstall python-dotenv -y)",
      "Bash(pip install python-dotenv)",
      "Bash(python -m pip install --force-reinstall python-dotenv)",
      "Bash(C:UsersjulieAppDataLocalProgramsPythonPython311python.exe -m pip install --force-reinstall python-dotenv)",
      "Bash(C:UsersjulieAppDataLocalProgramsPythonPython311python.exe -c \"from dotenv import dotenv_values; print(''dotenv import OK avec Python 3.11'')\")",
      "Bash(py -3.11 -m pip install --force-reinstall python-dotenv)",
      "Bash(py -3.11 -c \"from dotenv import dotenv_values; print(''dotenv import OK'')\")",
      "Bash(py -3.11 -m pip list)",
      "Bash(py -3.11 -c \"import sys; sys.path.insert(0, ''src''); from config.settings import settings; print(f''OPENROUTER_API_KEY: {\"\"définie\"\" if settings.openrouter_api_key else \"\"NON DÉFINIE\"\"}''); print(f''Reactive Resume URL: {settings.reactive_resume_url}''); print(f''Modèle: {settings.openrouter_model}'')\")",
      "Bash(py -3.11 -c \"import PyPDF2; print(''PyPDF2 version:'', PyPDF2.__version__)\")",
      "Bash(py -3.11 src/main.py)"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "context7",
    "ide",
    "chrome-devtools",
    "github"
  ]
}
